/* Generated with BmpARGB8888ToC: https://github.com/ewidl/BmpARGB8888ToC */
#ifndef INCLUDE_TEST_H_
#define INCLUDE_TEST_H_

const unsigned char test[372UL + 1] __attribute__ ((aligned (4)))
{
  // BITMAP FILE HEADER
  0x42, 0x4D, // SIGNATURE
  0x74, 0x01, 0x00, 0x00, // FILE SIZE
  0x00, 0x00, 0x00, 0x00, // RESERVED
  0x48, 0x00, 0x00, 0x00, // PIXEL ARRAY OFFSET

  // DIB HEADER (BITMAPV3INFOHEADER)
  0x38, 0x00, 0x00, 0x00, // HEADER SIZE
  0x05, 0x00, 0x00, 0x00, // IMAGE WIDTH
  0x0F, 0x00, 0x00, 0x00, // IMAGE HEIGHT
  0x01, 0x00, // NUMBER OF COLOR PLANES
  0x20, 0x00, // NUMBER OF BITS PER PIXEL
  0x03, 0x00, 0x00, 0x00, // COMPRESSION METHOD
  0x2C, 0x01, 0x00, 0x00, // SIZE OF THE RAW BITMAP DATA
  0xC3, 0x0E, 0x00, 0x00, // HORIZONTAL RESOLUTION OF THE IMAGE
  0xC3, 0x0E, 0x00, 0x00, // VERTICAL RESOLUTION OF THE IMAGE
  0x00, 0x00, 0x00, 0x00, // NUMBER OF COLORS IN THE COLOR PALETTE
  0x00, 0x00, 0x00, 0x00, // NUMBER OF IMPORTANT COLORS USED
  0x00, 0x00, // UNITS FOR THE HORIZONTAL AND VERTICAL RESOLUTIONS
  0xFF, 0x00, // PADDING
  0x00, 0xFF, // DIRECTION IN WHICH THE BITS FILL THE BITMAP
  0x00, 0x00, // HALFTONING ALGORITHM
  0xFF, 0x00, 0x00, 0x00, // HALFTONING PARAMETER 1
  0x00, 0x00, 0x00, 0xFF, // HALFTONING PARAMETER 2

  0x00, 0x00, // GAP

  // PIXEL ARRAY
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF, 0x00, 0x00, 0xCC, 0xFF,
  0x00, 0x00, 0xCC, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF,
  0x00, 0xBB, 0x00, 0xFF, 0x00, 0xBB, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,
  0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF, 0xAA, 0x00, 0x00, 0xFF,

  0x00 // EOF
};

#endif // INCLUDE_TEST_H_
